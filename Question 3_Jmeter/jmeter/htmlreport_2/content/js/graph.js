/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18004.0, "minX": 0.0, "maxY": 24940.0, "series": [{"data": [[0.0, 18004.0], [0.1, 18029.0], [0.2, 18093.0], [0.3, 18093.0], [0.4, 18159.0], [0.5, 18207.0], [0.6, 18263.0], [0.7, 18279.0], [0.8, 18322.0], [0.9, 18369.0], [1.0, 18399.0], [1.1, 18416.0], [1.2, 18420.0], [1.3, 18424.0], [1.4, 18424.0], [1.5, 18486.0], [1.6, 18497.0], [1.7, 18507.0], [1.8, 18522.0], [1.9, 18525.0], [2.0, 18546.0], [2.1, 18551.0], [2.2, 18551.0], [2.3, 18561.0], [2.4, 18565.0], [2.5, 18568.0], [2.6, 18581.0], [2.7, 18590.0], [2.8, 18591.0], [2.9, 18621.0], [3.0, 18626.0], [3.1, 18628.0], [3.2, 18636.0], [3.3, 18643.0], [3.4, 18648.0], [3.5, 18649.0], [3.6, 18654.0], [3.7, 18693.0], [3.8, 18705.0], [3.9, 18714.0], [4.0, 18715.0], [4.1, 18723.0], [4.2, 18728.0], [4.3, 18739.0], [4.4, 18743.0], [4.5, 18745.0], [4.6, 18749.0], [4.7, 18752.0], [4.8, 18753.0], [4.9, 18756.0], [5.0, 18786.0], [5.1, 18788.0], [5.2, 18797.0], [5.3, 18807.0], [5.4, 18822.0], [5.5, 18827.0], [5.6, 18833.0], [5.7, 18840.0], [5.8, 18843.0], [5.9, 18847.0], [6.0, 18854.0], [6.1, 18864.0], [6.2, 18876.0], [6.3, 18879.0], [6.4, 18886.0], [6.5, 18889.0], [6.6, 18890.0], [6.7, 18897.0], [6.8, 18902.0], [6.9, 18906.0], [7.0, 18918.0], [7.1, 18921.0], [7.2, 18923.0], [7.3, 18927.0], [7.4, 18947.0], [7.5, 18948.0], [7.6, 18953.0], [7.7, 18969.0], [7.8, 18970.0], [7.9, 18974.0], [8.0, 18980.0], [8.1, 18980.0], [8.2, 18982.0], [8.3, 18989.0], [8.4, 18994.0], [8.5, 19000.0], [8.6, 19001.0], [8.7, 19003.0], [8.8, 19006.0], [8.9, 19007.0], [9.0, 19008.0], [9.1, 19009.0], [9.2, 19016.0], [9.3, 19017.0], [9.4, 19018.0], [9.5, 19019.0], [9.6, 19032.0], [9.7, 19061.0], [9.8, 19064.0], [9.9, 19066.0], [10.0, 19067.0], [10.1, 19077.0], [10.2, 19086.0], [10.3, 19096.0], [10.4, 19105.0], [10.5, 19105.0], [10.6, 19110.0], [10.7, 19116.0], [10.8, 19123.0], [10.9, 19126.0], [11.0, 19128.0], [11.1, 19129.0], [11.2, 19133.0], [11.3, 19136.0], [11.4, 19139.0], [11.5, 19144.0], [11.6, 19151.0], [11.7, 19162.0], [11.8, 19165.0], [11.9, 19169.0], [12.0, 19178.0], [12.1, 19181.0], [12.2, 19182.0], [12.3, 19182.0], [12.4, 19182.0], [12.5, 19184.0], [12.6, 19196.0], [12.7, 19199.0], [12.8, 19203.0], [12.9, 19207.0], [13.0, 19218.0], [13.1, 19226.0], [13.2, 19228.0], [13.3, 19230.0], [13.4, 19233.0], [13.5, 19241.0], [13.6, 19252.0], [13.7, 19256.0], [13.8, 19262.0], [13.9, 19268.0], [14.0, 19269.0], [14.1, 19273.0], [14.2, 19277.0], [14.3, 19277.0], [14.4, 19282.0], [14.5, 19299.0], [14.6, 19306.0], [14.7, 19312.0], [14.8, 19323.0], [14.9, 19336.0], [15.0, 19341.0], [15.1, 19343.0], [15.2, 19344.0], [15.3, 19344.0], [15.4, 19346.0], [15.5, 19348.0], [15.6, 19352.0], [15.7, 19353.0], [15.8, 19354.0], [15.9, 19355.0], [16.0, 19358.0], [16.1, 19369.0], [16.2, 19374.0], [16.3, 19380.0], [16.4, 19394.0], [16.5, 19401.0], [16.6, 19403.0], [16.7, 19408.0], [16.8, 19413.0], [16.9, 19416.0], [17.0, 19416.0], [17.1, 19434.0], [17.2, 19435.0], [17.3, 19436.0], [17.4, 19440.0], [17.5, 19457.0], [17.6, 19458.0], [17.7, 19462.0], [17.8, 19468.0], [17.9, 19469.0], [18.0, 19474.0], [18.1, 19483.0], [18.2, 19486.0], [18.3, 19501.0], [18.4, 19503.0], [18.5, 19504.0], [18.6, 19507.0], [18.7, 19509.0], [18.8, 19513.0], [18.9, 19514.0], [19.0, 19518.0], [19.1, 19521.0], [19.2, 19521.0], [19.3, 19524.0], [19.4, 19524.0], [19.5, 19525.0], [19.6, 19527.0], [19.7, 19528.0], [19.8, 19536.0], [19.9, 19536.0], [20.0, 19536.0], [20.1, 19547.0], [20.2, 19548.0], [20.3, 19550.0], [20.4, 19550.0], [20.5, 19556.0], [20.6, 19561.0], [20.7, 19566.0], [20.8, 19566.0], [20.9, 19572.0], [21.0, 19574.0], [21.1, 19583.0], [21.2, 19585.0], [21.3, 19586.0], [21.4, 19587.0], [21.5, 19589.0], [21.6, 19591.0], [21.7, 19592.0], [21.8, 19593.0], [21.9, 19596.0], [22.0, 19639.0], [22.1, 19640.0], [22.2, 19659.0], [22.3, 19682.0], [22.4, 19688.0], [22.5, 19689.0], [22.6, 19692.0], [22.7, 19706.0], [22.8, 19716.0], [22.9, 19729.0], [23.0, 19743.0], [23.1, 19749.0], [23.2, 19751.0], [23.3, 19751.0], [23.4, 19757.0], [23.5, 19759.0], [23.6, 19759.0], [23.7, 19761.0], [23.8, 19780.0], [23.9, 19785.0], [24.0, 19786.0], [24.1, 19791.0], [24.2, 19792.0], [24.3, 19805.0], [24.4, 19811.0], [24.5, 19814.0], [24.6, 19814.0], [24.7, 19839.0], [24.8, 19845.0], [24.9, 19845.0], [25.0, 19849.0], [25.1, 19856.0], [25.2, 19863.0], [25.3, 19864.0], [25.4, 19868.0], [25.5, 19875.0], [25.6, 19877.0], [25.7, 19877.0], [25.8, 19878.0], [25.9, 19882.0], [26.0, 19890.0], [26.1, 19893.0], [26.2, 19895.0], [26.3, 19896.0], [26.4, 19900.0], [26.5, 19900.0], [26.6, 19902.0], [26.7, 19908.0], [26.8, 19908.0], [26.9, 19909.0], [27.0, 19913.0], [27.1, 19918.0], [27.2, 19919.0], [27.3, 19921.0], [27.4, 19924.0], [27.5, 19927.0], [27.6, 19929.0], [27.7, 19931.0], [27.8, 19932.0], [27.9, 19933.0], [28.0, 19933.0], [28.1, 19933.0], [28.2, 19933.0], [28.3, 19934.0], [28.4, 19939.0], [28.5, 19939.0], [28.6, 19939.0], [28.7, 19940.0], [28.8, 19941.0], [28.9, 19942.0], [29.0, 19942.0], [29.1, 19943.0], [29.2, 19943.0], [29.3, 19943.0], [29.4, 19945.0], [29.5, 19946.0], [29.6, 19948.0], [29.7, 19948.0], [29.8, 19949.0], [29.9, 19950.0], [30.0, 19950.0], [30.1, 19952.0], [30.2, 19953.0], [30.3, 19953.0], [30.4, 19953.0], [30.5, 19954.0], [30.6, 19954.0], [30.7, 19955.0], [30.8, 19956.0], [30.9, 19958.0], [31.0, 19961.0], [31.1, 19961.0], [31.2, 19962.0], [31.3, 19962.0], [31.4, 19963.0], [31.5, 19964.0], [31.6, 19967.0], [31.7, 19967.0], [31.8, 19968.0], [31.9, 19969.0], [32.0, 19971.0], [32.1, 19972.0], [32.2, 19974.0], [32.3, 19976.0], [32.4, 19976.0], [32.5, 19976.0], [32.6, 19976.0], [32.7, 19977.0], [32.8, 19982.0], [32.9, 19982.0], [33.0, 19982.0], [33.1, 19985.0], [33.2, 19986.0], [33.3, 19988.0], [33.4, 19989.0], [33.5, 19990.0], [33.6, 19993.0], [33.7, 19994.0], [33.8, 19998.0], [33.9, 19999.0], [34.0, 20000.0], [34.1, 20001.0], [34.2, 20003.0], [34.3, 20005.0], [34.4, 20008.0], [34.5, 20008.0], [34.6, 20009.0], [34.7, 20010.0], [34.8, 20011.0], [34.9, 20011.0], [35.0, 20014.0], [35.1, 20015.0], [35.2, 20016.0], [35.3, 20017.0], [35.4, 20018.0], [35.5, 20019.0], [35.6, 20021.0], [35.7, 20022.0], [35.8, 20022.0], [35.9, 20023.0], [36.0, 20024.0], [36.1, 20027.0], [36.2, 20028.0], [36.3, 20029.0], [36.4, 20031.0], [36.5, 20034.0], [36.6, 20034.0], [36.7, 20036.0], [36.8, 20036.0], [36.9, 20037.0], [37.0, 20038.0], [37.1, 20044.0], [37.2, 20045.0], [37.3, 20046.0], [37.4, 20046.0], [37.5, 20047.0], [37.6, 20049.0], [37.7, 20053.0], [37.8, 20061.0], [37.9, 20062.0], [38.0, 20071.0], [38.1, 20073.0], [38.2, 20074.0], [38.3, 20076.0], [38.4, 20081.0], [38.5, 20085.0], [38.6, 20092.0], [38.7, 20092.0], [38.8, 20095.0], [38.9, 20096.0], [39.0, 20096.0], [39.1, 20096.0], [39.2, 20097.0], [39.3, 20097.0], [39.4, 20099.0], [39.5, 20099.0], [39.6, 20101.0], [39.7, 20103.0], [39.8, 20103.0], [39.9, 20103.0], [40.0, 20103.0], [40.1, 20104.0], [40.2, 20104.0], [40.3, 20104.0], [40.4, 20106.0], [40.5, 20107.0], [40.6, 20108.0], [40.7, 20110.0], [40.8, 20111.0], [40.9, 20112.0], [41.0, 20112.0], [41.1, 20113.0], [41.2, 20113.0], [41.3, 20115.0], [41.4, 20116.0], [41.5, 20116.0], [41.6, 20118.0], [41.7, 20121.0], [41.8, 20121.0], [41.9, 20126.0], [42.0, 20127.0], [42.1, 20129.0], [42.2, 20129.0], [42.3, 20131.0], [42.4, 20132.0], [42.5, 20132.0], [42.6, 20134.0], [42.7, 20139.0], [42.8, 20140.0], [42.9, 20140.0], [43.0, 20140.0], [43.1, 20141.0], [43.2, 20144.0], [43.3, 20145.0], [43.4, 20145.0], [43.5, 20146.0], [43.6, 20148.0], [43.7, 20158.0], [43.8, 20158.0], [43.9, 20163.0], [44.0, 20166.0], [44.1, 20167.0], [44.2, 20170.0], [44.3, 20171.0], [44.4, 20172.0], [44.5, 20172.0], [44.6, 20173.0], [44.7, 20174.0], [44.8, 20174.0], [44.9, 20174.0], [45.0, 20175.0], [45.1, 20177.0], [45.2, 20179.0], [45.3, 20179.0], [45.4, 20180.0], [45.5, 20181.0], [45.6, 20181.0], [45.7, 20182.0], [45.8, 20185.0], [45.9, 20186.0], [46.0, 20187.0], [46.1, 20187.0], [46.2, 20187.0], [46.3, 20189.0], [46.4, 20189.0], [46.5, 20190.0], [46.6, 20192.0], [46.7, 20193.0], [46.8, 20194.0], [46.9, 20194.0], [47.0, 20194.0], [47.1, 20197.0], [47.2, 20197.0], [47.3, 20198.0], [47.4, 20198.0], [47.5, 20198.0], [47.6, 20198.0], [47.7, 20198.0], [47.8, 20199.0], [47.9, 20199.0], [48.0, 20199.0], [48.1, 20201.0], [48.2, 20201.0], [48.3, 20201.0], [48.4, 20204.0], [48.5, 20204.0], [48.6, 20205.0], [48.7, 20205.0], [48.8, 20205.0], [48.9, 20207.0], [49.0, 20207.0], [49.1, 20208.0], [49.2, 20210.0], [49.3, 20210.0], [49.4, 20211.0], [49.5, 20212.0], [49.6, 20212.0], [49.7, 20213.0], [49.8, 20214.0], [49.9, 20214.0], [50.0, 20214.0], [50.1, 20214.0], [50.2, 20215.0], [50.3, 20216.0], [50.4, 20218.0], [50.5, 20221.0], [50.6, 20222.0], [50.7, 20223.0], [50.8, 20224.0], [50.9, 20225.0], [51.0, 20227.0], [51.1, 20231.0], [51.2, 20232.0], [51.3, 20232.0], [51.4, 20232.0], [51.5, 20232.0], [51.6, 20232.0], [51.7, 20233.0], [51.8, 20233.0], [51.9, 20235.0], [52.0, 20235.0], [52.1, 20236.0], [52.2, 20237.0], [52.3, 20237.0], [52.4, 20239.0], [52.5, 20241.0], [52.6, 20241.0], [52.7, 20242.0], [52.8, 20244.0], [52.9, 20247.0], [53.0, 20250.0], [53.1, 20250.0], [53.2, 20251.0], [53.3, 20253.0], [53.4, 20253.0], [53.5, 20258.0], [53.6, 20262.0], [53.7, 20265.0], [53.8, 20265.0], [53.9, 20266.0], [54.0, 20268.0], [54.1, 20270.0], [54.2, 20273.0], [54.3, 20273.0], [54.4, 20275.0], [54.5, 20278.0], [54.6, 20279.0], [54.7, 20280.0], [54.8, 20281.0], [54.9, 20283.0], [55.0, 20285.0], [55.1, 20285.0], [55.2, 20286.0], [55.3, 20286.0], [55.4, 20288.0], [55.5, 20288.0], [55.6, 20288.0], [55.7, 20288.0], [55.8, 20290.0], [55.9, 20290.0], [56.0, 20291.0], [56.1, 20291.0], [56.2, 20298.0], [56.3, 20298.0], [56.4, 20298.0], [56.5, 20303.0], [56.6, 20305.0], [56.7, 20305.0], [56.8, 20310.0], [56.9, 20311.0], [57.0, 20312.0], [57.1, 20312.0], [57.2, 20317.0], [57.3, 20319.0], [57.4, 20322.0], [57.5, 20322.0], [57.6, 20323.0], [57.7, 20330.0], [57.8, 20336.0], [57.9, 20344.0], [58.0, 20344.0], [58.1, 20346.0], [58.2, 20352.0], [58.3, 20354.0], [58.4, 20357.0], [58.5, 20358.0], [58.6, 20359.0], [58.7, 20361.0], [58.8, 20366.0], [58.9, 20367.0], [59.0, 20372.0], [59.1, 20374.0], [59.2, 20390.0], [59.3, 20393.0], [59.4, 20395.0], [59.5, 20399.0], [59.6, 20402.0], [59.7, 20403.0], [59.8, 20403.0], [59.9, 20406.0], [60.0, 20406.0], [60.1, 20408.0], [60.2, 20414.0], [60.3, 20418.0], [60.4, 20420.0], [60.5, 20421.0], [60.6, 20422.0], [60.7, 20423.0], [60.8, 20425.0], [60.9, 20427.0], [61.0, 20427.0], [61.1, 20429.0], [61.2, 20431.0], [61.3, 20432.0], [61.4, 20432.0], [61.5, 20434.0], [61.6, 20436.0], [61.7, 20438.0], [61.8, 20441.0], [61.9, 20443.0], [62.0, 20445.0], [62.1, 20446.0], [62.2, 20447.0], [62.3, 20448.0], [62.4, 20448.0], [62.5, 20449.0], [62.6, 20449.0], [62.7, 20452.0], [62.8, 20454.0], [62.9, 20455.0], [63.0, 20458.0], [63.1, 20464.0], [63.2, 20464.0], [63.3, 20464.0], [63.4, 20469.0], [63.5, 20469.0], [63.6, 20471.0], [63.7, 20473.0], [63.8, 20474.0], [63.9, 20475.0], [64.0, 20478.0], [64.1, 20478.0], [64.2, 20479.0], [64.3, 20480.0], [64.4, 20480.0], [64.5, 20483.0], [64.6, 20487.0], [64.7, 20487.0], [64.8, 20488.0], [64.9, 20488.0], [65.0, 20488.0], [65.1, 20489.0], [65.2, 20491.0], [65.3, 20492.0], [65.4, 20492.0], [65.5, 20493.0], [65.6, 20493.0], [65.7, 20494.0], [65.8, 20494.0], [65.9, 20496.0], [66.0, 20498.0], [66.1, 20498.0], [66.2, 20499.0], [66.3, 20499.0], [66.4, 20499.0], [66.5, 20500.0], [66.6, 20501.0], [66.7, 20501.0], [66.8, 20501.0], [66.9, 20502.0], [67.0, 20504.0], [67.1, 20504.0], [67.2, 20504.0], [67.3, 20504.0], [67.4, 20508.0], [67.5, 20511.0], [67.6, 20511.0], [67.7, 20512.0], [67.8, 20512.0], [67.9, 20513.0], [68.0, 20513.0], [68.1, 20518.0], [68.2, 20519.0], [68.3, 20521.0], [68.4, 20521.0], [68.5, 20521.0], [68.6, 20521.0], [68.7, 20523.0], [68.8, 20523.0], [68.9, 20523.0], [69.0, 20523.0], [69.1, 20524.0], [69.2, 20524.0], [69.3, 20525.0], [69.4, 20525.0], [69.5, 20525.0], [69.6, 20525.0], [69.7, 20526.0], [69.8, 20527.0], [69.9, 20528.0], [70.0, 20530.0], [70.1, 20530.0], [70.2, 20531.0], [70.3, 20532.0], [70.4, 20532.0], [70.5, 20532.0], [70.6, 20533.0], [70.7, 20534.0], [70.8, 20534.0], [70.9, 20535.0], [71.0, 20535.0], [71.1, 20536.0], [71.2, 20537.0], [71.3, 20538.0], [71.4, 20538.0], [71.5, 20538.0], [71.6, 20539.0], [71.7, 20539.0], [71.8, 20541.0], [71.9, 20544.0], [72.0, 20545.0], [72.1, 20545.0], [72.2, 20546.0], [72.3, 20547.0], [72.4, 20547.0], [72.5, 20549.0], [72.6, 20550.0], [72.7, 20552.0], [72.8, 20552.0], [72.9, 20553.0], [73.0, 20555.0], [73.1, 20555.0], [73.2, 20557.0], [73.3, 20558.0], [73.4, 20559.0], [73.5, 20559.0], [73.6, 20559.0], [73.7, 20559.0], [73.8, 20560.0], [73.9, 20560.0], [74.0, 20560.0], [74.1, 20562.0], [74.2, 20562.0], [74.3, 20563.0], [74.4, 20563.0], [74.5, 20563.0], [74.6, 20563.0], [74.7, 20564.0], [74.8, 20564.0], [74.9, 20564.0], [75.0, 20565.0], [75.1, 20566.0], [75.2, 20567.0], [75.3, 20567.0], [75.4, 20567.0], [75.5, 20569.0], [75.6, 20570.0], [75.7, 20570.0], [75.8, 20571.0], [75.9, 20571.0], [76.0, 20571.0], [76.1, 20571.0], [76.2, 20572.0], [76.3, 20573.0], [76.4, 20573.0], [76.5, 20574.0], [76.6, 20575.0], [76.7, 20575.0], [76.8, 20575.0], [76.9, 20576.0], [77.0, 20577.0], [77.1, 20577.0], [77.2, 20578.0], [77.3, 20578.0], [77.4, 20579.0], [77.5, 20579.0], [77.6, 20579.0], [77.7, 20580.0], [77.8, 20580.0], [77.9, 20581.0], [78.0, 20581.0], [78.1, 20582.0], [78.2, 20583.0], [78.3, 20583.0], [78.4, 20583.0], [78.5, 20584.0], [78.6, 20584.0], [78.7, 20585.0], [78.8, 20587.0], [78.9, 20588.0], [79.0, 20591.0], [79.1, 20592.0], [79.2, 20595.0], [79.3, 20597.0], [79.4, 20597.0], [79.5, 20597.0], [79.6, 20597.0], [79.7, 20599.0], [79.8, 20599.0], [79.9, 20600.0], [80.0, 20600.0], [80.1, 20600.0], [80.2, 20600.0], [80.3, 20601.0], [80.4, 20601.0], [80.5, 20601.0], [80.6, 20601.0], [80.7, 20602.0], [80.8, 20603.0], [80.9, 20605.0], [81.0, 20607.0], [81.1, 20609.0], [81.2, 20609.0], [81.3, 20610.0], [81.4, 20612.0], [81.5, 20613.0], [81.6, 20614.0], [81.7, 20614.0], [81.8, 20615.0], [81.9, 20616.0], [82.0, 20616.0], [82.1, 20617.0], [82.2, 20622.0], [82.3, 20626.0], [82.4, 20627.0], [82.5, 20632.0], [82.6, 20633.0], [82.7, 20634.0], [82.8, 20636.0], [82.9, 20637.0], [83.0, 20638.0], [83.1, 20638.0], [83.2, 20642.0], [83.3, 20643.0], [83.4, 20643.0], [83.5, 20651.0], [83.6, 20656.0], [83.7, 20658.0], [83.8, 20660.0], [83.9, 20663.0], [84.0, 20666.0], [84.1, 20666.0], [84.2, 20672.0], [84.3, 20673.0], [84.4, 20678.0], [84.5, 20692.0], [84.6, 20693.0], [84.7, 20693.0], [84.8, 20698.0], [84.9, 20698.0], [85.0, 20699.0], [85.1, 20705.0], [85.2, 20707.0], [85.3, 20709.0], [85.4, 20729.0], [85.5, 20730.0], [85.6, 20734.0], [85.7, 20740.0], [85.8, 20741.0], [85.9, 20742.0], [86.0, 20747.0], [86.1, 20775.0], [86.2, 20790.0], [86.3, 20820.0], [86.4, 20844.0], [86.5, 20875.0], [86.6, 20897.0], [86.7, 20899.0], [86.8, 20926.0], [86.9, 20940.0], [87.0, 20950.0], [87.1, 20965.0], [87.2, 20979.0], [87.3, 21012.0], [87.4, 21038.0], [87.5, 21043.0], [87.6, 21044.0], [87.7, 21092.0], [87.8, 21102.0], [87.9, 21108.0], [88.0, 21120.0], [88.1, 21126.0], [88.2, 21146.0], [88.3, 21162.0], [88.4, 21165.0], [88.5, 21178.0], [88.6, 21185.0], [88.7, 21199.0], [88.8, 21225.0], [88.9, 21225.0], [89.0, 21225.0], [89.1, 21235.0], [89.2, 21238.0], [89.3, 21255.0], [89.4, 21256.0], [89.5, 21262.0], [89.6, 21266.0], [89.7, 21272.0], [89.8, 21274.0], [89.9, 21276.0], [90.0, 21278.0], [90.1, 21282.0], [90.2, 21284.0], [90.3, 21285.0], [90.4, 21288.0], [90.5, 21291.0], [90.6, 21291.0], [90.7, 21294.0], [90.8, 21295.0], [90.9, 21304.0], [91.0, 21308.0], [91.1, 21309.0], [91.2, 21309.0], [91.3, 21310.0], [91.4, 21315.0], [91.5, 21317.0], [91.6, 21332.0], [91.7, 21333.0], [91.8, 21334.0], [91.9, 21335.0], [92.0, 21357.0], [92.1, 21367.0], [92.2, 21371.0], [92.3, 21374.0], [92.4, 21376.0], [92.5, 21379.0], [92.6, 21383.0], [92.7, 21386.0], [92.8, 21399.0], [92.9, 21399.0], [93.0, 21402.0], [93.1, 21404.0], [93.2, 21417.0], [93.3, 21426.0], [93.4, 21428.0], [93.5, 21431.0], [93.6, 21432.0], [93.7, 21434.0], [93.8, 21436.0], [93.9, 21436.0], [94.0, 21437.0], [94.1, 21437.0], [94.2, 21437.0], [94.3, 21441.0], [94.4, 21441.0], [94.5, 21443.0], [94.6, 21444.0], [94.7, 21446.0], [94.8, 21446.0], [94.9, 21451.0], [95.0, 21452.0], [95.1, 21453.0], [95.2, 21455.0], [95.3, 21456.0], [95.4, 21457.0], [95.5, 21460.0], [95.6, 21461.0], [95.7, 21465.0], [95.8, 21466.0], [95.9, 21466.0], [96.0, 21472.0], [96.1, 21476.0], [96.2, 21477.0], [96.3, 21491.0], [96.4, 21496.0], [96.5, 21500.0], [96.6, 21503.0], [96.7, 21509.0], [96.8, 21514.0], [96.9, 21516.0], [97.0, 21523.0], [97.1, 21528.0], [97.2, 21530.0], [97.3, 21534.0], [97.4, 21540.0], [97.5, 21540.0], [97.6, 21543.0], [97.7, 21550.0], [97.8, 21553.0], [97.9, 21557.0], [98.0, 21582.0], [98.1, 21613.0], [98.2, 21648.0], [98.3, 21654.0], [98.4, 21686.0], [98.5, 21766.0], [98.6, 21910.0], [98.7, 22082.0], [98.8, 22172.0], [98.9, 22194.0], [99.0, 22836.0], [99.1, 23085.0], [99.2, 23431.0], [99.3, 23512.0], [99.4, 23588.0], [99.5, 23640.0], [99.6, 23643.0], [99.7, 24814.0], [99.8, 24896.0], [99.9, 24940.0]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 18000.0, "maxY": 134.0, "series": [{"data": [[18100.0, 2.0], [18300.0, 3.0], [18200.0, 3.0], [18000.0, 3.0], [18400.0, 5.0], [19300.0, 19.0], [19400.0, 18.0], [19200.0, 18.0], [19100.0, 24.0], [18700.0, 16.0], [18500.0, 12.0], [18600.0, 9.0], [18900.0, 17.0], [18800.0, 15.0], [19000.0, 19.0], [19700.0, 16.0], [19500.0, 36.0], [19900.0, 76.0], [20100.0, 85.0], [19800.0, 21.0], [20200.0, 84.0], [20000.0, 56.0], [19600.0, 7.0], [20300.0, 31.0], [20400.0, 69.0], [21300.0, 21.0], [20600.0, 52.0], [20500.0, 134.0], [20700.0, 12.0], [20800.0, 5.0], [20900.0, 5.0], [21100.0, 11.0], [21000.0, 5.0], [21200.0, 21.0], [21400.0, 35.0], [21500.0, 16.0], [21600.0, 4.0], [21700.0, 1.0], [21900.0, 1.0], [22000.0, 1.0], [22100.0, 2.0], [22800.0, 1.0], [23400.0, 1.0], [23500.0, 2.0], [23000.0, 1.0], [23600.0, 2.0], [24800.0, 2.0], [24900.0, 1.0]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 24900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 66.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 934.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 66.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 934.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 545.1539999999991, "minX": 1.70965704E12, "maxY": 545.1539999999991, "series": [{"data": [[1.70965704E12, 545.1539999999991]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70965704E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18369.0, "minX": 1.0, "maxY": 24940.0, "series": [{"data": [[2.0, 24896.0], [3.0, 24814.0], [4.0, 23640.0], [5.0, 23085.0], [6.0, 23643.0], [7.0, 23588.0], [8.0, 23512.0], [9.0, 23431.0], [10.0, 22836.0], [11.0, 20940.0], [12.0, 22172.0], [13.0, 22194.0], [14.0, 22082.0], [15.0, 21654.0], [16.0, 21557.0], [17.0, 21910.0], [18.0, 21528.0], [19.0, 21766.0], [20.0, 21540.0], [21.0, 20730.0], [22.0, 21686.0], [23.0, 21648.0], [25.0, 21389.0], [26.0, 21613.0], [27.0, 21550.0], [28.0, 21534.0], [29.0, 21383.0], [30.0, 21235.0], [33.0, 21285.0], [32.0, 21448.5], [35.0, 21541.5], [37.0, 20096.0], [36.0, 21543.0], [39.0, 21178.0], [38.0, 21436.0], [46.0, 21345.8], [49.0, 21368.6], [61.0, 21413.375], [67.0, 21452.0], [65.0, 20782.333333333332], [70.0, 21377.0], [69.0, 21509.0], [68.0, 21291.0], [74.0, 20939.14285714286], [73.0, 21503.0], [72.0, 21444.0], [78.0, 21440.0], [77.0, 21466.0], [83.0, 21266.0], [82.0, 21465.0], [81.0, 21371.0], [80.0, 21436.0], [87.0, 21446.0], [86.0, 21419.0], [91.0, 20958.5], [90.0, 21514.0], [95.0, 21450.0], [93.0, 21381.666666666668], [92.0, 21437.0], [99.0, 21213.5], [97.0, 21461.0], [103.0, 21256.0], [101.0, 21402.0], [100.0, 21404.0], [107.0, 21421.5], [106.0, 21211.5], [110.0, 21374.0], [109.0, 21343.5], [115.0, 20646.5], [112.0, 21366.0], [118.0, 21012.0], [117.0, 21311.666666666668], [121.0, 21278.0], [120.0, 20910.0], [127.0, 21038.0], [126.0, 21334.0], [125.0, 21108.0], [124.0, 20716.666666666668], [135.0, 21284.0], [134.0, 19877.0], [133.0, 21225.0], [132.0, 21225.0], [131.0, 21272.0], [130.0, 21076.5], [128.0, 21310.0], [143.0, 20875.0], [142.0, 21199.0], [141.0, 21120.0], [140.0, 19786.0], [139.0, 21043.0], [138.0, 21225.0], [137.0, 21291.0], [136.0, 21238.0], [151.0, 19785.0], [150.0, 20926.0], [149.0, 20897.0], [147.0, 20979.0], [146.0, 21106.0], [145.0, 20965.0], [144.0, 21146.0], [159.0, 20729.0], [157.0, 20239.5], [155.0, 20719.5], [153.0, 20820.0], [152.0, 20899.0], [166.0, 20673.0], [161.0, 20775.0], [160.0, 20591.5], [175.0, 20707.0], [174.0, 20684.166666666668], [170.0, 20682.0], [169.0, 19729.0], [168.0, 20726.666666666668], [183.0, 19488.0], [179.0, 20693.0], [178.0, 20660.0], [177.0, 20666.0], [176.0, 20747.0], [191.0, 20643.0], [190.0, 20626.333333333332], [198.0, 20350.0], [197.0, 20601.0], [195.0, 20344.0], [194.0, 20597.0], [193.0, 20628.5], [192.0, 19394.0], [203.0, 20604.8], [215.0, 20575.0], [214.0, 19116.0], [213.0, 19474.0], [211.0, 20626.0], [210.0, 19401.0], [209.0, 19358.0], [208.0, 19919.5], [223.0, 20250.0], [221.0, 20599.0], [220.0, 20115.666666666668], [217.0, 20570.0], [216.0, 20603.0], [247.0, 20436.08], [254.0, 20562.5], [252.0, 20578.0], [251.0, 19469.0], [250.0, 19972.5], [249.0, 20557.0], [269.0, 20634.0], [270.0, 20571.5], [268.0, 20567.0], [267.0, 20479.0], [266.0, 19348.0], [264.0, 20588.5], [263.0, 19323.0], [261.0, 19626.0], [259.0, 20571.0], [258.0, 20285.0], [257.0, 20637.0], [256.0, 19355.0], [285.0, 20237.6], [282.0, 19583.0], [281.0, 20004.5], [280.0, 20587.0], [279.0, 20580.0], [277.0, 20600.0], [275.0, 19831.0], [274.0, 20536.5], [273.0, 20638.0], [272.0, 19566.0], [302.0, 20579.0], [303.0, 20465.0], [301.0, 20583.0], [289.0, 20113.333333333332], [299.0, 20627.0], [298.0, 19673.666666666668], [297.0, 19369.0], [294.0, 20583.0], [293.0, 19880.5], [292.0, 20069.5], [316.0, 20618.5], [315.0, 20194.0], [313.0, 20588.0], [311.0, 20575.0], [308.0, 19790.0], [306.0, 20545.0], [305.0, 20581.0], [335.0, 20571.5], [332.0, 20548.5], [328.0, 20227.75], [324.0, 20395.666666666668], [323.0, 20017.25], [320.0, 20095.333333333332], [350.0, 19574.666666666668], [349.0, 20523.0], [348.0, 19268.0], [345.0, 20473.666666666668], [341.0, 19790.0], [340.0, 20454.0], [337.0, 20522.5], [336.0, 20568.5], [355.0, 20564.0], [366.0, 20554.666666666668], [365.0, 20032.5], [362.0, 20518.0], [361.0, 20286.0], [360.0, 20524.0], [359.0, 20374.0], [352.0, 20569.0], [354.0, 20096.0], [353.0, 20372.0], [383.0, 20187.0], [379.0, 20545.666666666668], [375.0, 20248.5], [373.0, 20288.0], [372.0, 20555.0], [370.0, 20554.5], [394.0, 20354.0], [393.0, 20521.0], [392.0, 20532.0], [388.0, 20346.0], [387.0, 19982.5], [385.0, 20575.0], [384.0, 20420.5], [413.0, 20243.166666666668], [411.0, 20042.0], [409.0, 20556.0], [408.0, 20275.666666666668], [407.0, 20565.0], [406.0, 20521.0], [405.0, 20560.0], [402.0, 20521.0], [401.0, 20514.5], [429.0, 20559.0], [431.0, 20547.666666666668], [428.0, 20525.0], [426.0, 20483.333333333332], [424.0, 19837.0], [422.0, 20274.4], [421.0, 20499.0], [419.0, 19139.0], [417.0, 20529.0], [445.0, 20451.5], [442.0, 20482.5], [441.0, 20480.0], [439.0, 20493.0], [437.0, 20389.0], [435.0, 19699.0], [433.0, 20501.5], [450.0, 20518.0], [458.0, 20488.0], [456.0, 20501.0], [455.0, 20399.0], [454.0, 20494.0], [453.0, 20298.0], [452.0, 19380.0], [451.0, 20534.0], [448.0, 18822.0], [477.0, 19433.0], [478.0, 20471.0], [476.0, 20441.0], [475.0, 19867.333333333332], [473.0, 20494.0], [472.0, 20014.25], [469.0, 20449.0], [468.0, 20470.333333333332], [466.0, 19344.0], [494.0, 19203.0], [487.0, 19743.666666666668], [485.0, 20062.4], [481.0, 19632.75], [480.0, 20502.0], [498.0, 20142.8], [510.0, 19262.0], [508.0, 20341.0], [506.0, 19822.5], [504.0, 20358.5], [502.0, 20435.5], [500.0, 20321.5], [497.0, 20446.0], [496.0, 20483.0], [532.0, 20454.0], [537.0, 20249.5], [519.0, 20425.0], [516.0, 20445.0], [513.0, 20429.0], [512.0, 19934.333333333332], [535.0, 18947.0], [534.0, 19413.0], [533.0, 20225.333333333336], [531.0, 20231.0], [528.0, 20343.666666666668], [525.0, 19981.666666666668], [523.0, 19972.0], [520.0, 20362.0], [571.0, 19594.0], [573.0, 20066.0], [575.0, 19061.0], [572.0, 20288.0], [570.0, 18889.0], [569.0, 20103.0], [568.0, 19789.666666666668], [549.0, 19599.25], [546.0, 19887.0], [545.0, 20288.0], [557.0, 20210.5], [554.0, 20312.0], [552.0, 20107.6], [565.0, 20330.0], [564.0, 20099.0], [581.0, 19754.6], [579.0, 20129.0], [578.0, 19110.0], [577.0, 20162.0], [576.0, 19306.0], [671.0, 20251.0], [670.0, 20233.0], [669.0, 20269.0], [665.0, 19462.0], [693.0, 20203.6], [690.0, 19875.0], [685.0, 20288.0], [683.0, 19611.5], [682.0, 20283.0], [679.0, 20237.0], [676.0, 19884.5], [765.0, 20250.0], [766.0, 19447.333333333332], [763.0, 20248.0], [762.0, 20235.0], [761.0, 20192.0], [760.0, 20210.0], [751.0, 20123.333333333332], [738.0, 20069.5], [739.0, 20212.0], [743.0, 19745.0], [742.0, 18837.5], [750.0, 20194.0], [747.0, 20247.333333333332], [746.0, 19762.333333333332], [745.0, 19529.5], [758.0, 20211.0], [757.0, 18896.5], [755.0, 18741.0], [754.0, 20192.0], [796.0, 19778.666666666668], [799.0, 20207.0], [798.0, 19555.0], [797.0, 19675.333333333332], [795.0, 20205.0], [778.0, 19459.5], [776.0, 20104.0], [775.0, 20154.6], [772.0, 19795.75], [770.0, 20198.0], [769.0, 19510.333333333332], [807.0, 20198.25], [818.0, 19832.333333333332], [817.0, 20214.0], [816.0, 20175.0], [815.0, 20188.0], [812.0, 20006.666666666668], [811.0, 20179.0], [806.0, 19017.0], [805.0, 19913.0], [803.0, 20049.0], [802.0, 20014.0], [855.0, 19819.5], [854.0, 20191.333333333332], [852.0, 19908.0], [851.0, 19477.0], [924.0, 19133.0], [926.0, 20016.5], [927.0, 18756.0], [925.0, 19815.333333333332], [921.0, 20214.0], [920.0, 19431.0], [919.0, 20132.0], [918.0, 20065.0], [901.0, 18843.0], [899.0, 20185.6], [896.0, 20225.0], [959.0, 19525.09090909091], [946.0, 19607.333333333332], [941.0, 18807.0], [938.0, 19586.0], [933.0, 18989.0], [931.0, 19986.0], [929.0, 19750.396984924617], [928.0, 19481.0], [985.0, 18911.500000000004], [991.0, 19332.0], [989.0, 18890.666666666668], [986.0, 19501.666666666668], [984.0, 19287.266666666666], [981.0, 19238.75], [982.0, 19108.75], [979.0, 19900.0], [972.0, 19757.0], [971.0, 18568.0], [968.0, 19343.0], [966.0, 19934.0], [965.0, 18565.0], [964.0, 19982.0], [963.0, 18486.0], [962.0, 19572.0], [961.0, 18369.0], [1000.0, 19164.833333333332], [994.0, 19468.0], [993.0, 19481.0], [1.0, 24940.0]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing", "isController": false}, {"data": [[545.1519999999997, 20190.345999999994]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2700.0, "minX": 1.70965704E12, "maxY": 10691.2, "series": [{"data": [[1.70965704E12, 10691.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70965704E12, 2700.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70965704E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20190.345999999994, "minX": 1.70965704E12, "maxY": 20190.345999999994, "series": [{"data": [[1.70965704E12, 20190.345999999994]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70965704E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20186.92200000004, "minX": 1.70965704E12, "maxY": 20186.92200000004, "series": [{"data": [[1.70965704E12, 20186.92200000004]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70965704E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19546.019999999997, "minX": 1.70965704E12, "maxY": 19546.019999999997, "series": [{"data": [[1.70965704E12, 19546.019999999997]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70965704E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18876.0, "minX": 1.70965704E12, "maxY": 24940.0, "series": [{"data": [[1.70965704E12, 24940.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70965704E12, 23213.100000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70965704E12, 24940.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70965704E12, 24403.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70965704E12, 18876.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70965704E12, 20735.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70965704E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19933.0, "minX": 3.0, "maxY": 24855.0, "series": [{"data": [[129.0, 21428.0], [4.0, 24855.0], [546.0, 20284.5], [5.0, 23512.0], [3.0, 21556.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[129.0, 21375.0], [546.0, 20402.5], [313.0, 19933.0], [5.0, 23537.0], [3.0, 22836.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 546.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19933.0, "minX": 3.0, "maxY": 24854.5, "series": [{"data": [[129.0, 21427.0], [4.0, 24854.5], [546.0, 20043.0], [5.0, 23512.0], [3.0, 21556.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[129.0, 21375.0], [546.0, 20402.0], [313.0, 19933.0], [5.0, 23536.5], [3.0, 22836.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 546.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.70965704E12, "maxY": 16.666666666666668, "series": [{"data": [[1.70965704E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70965704E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.70965704E12, "maxY": 15.566666666666666, "series": [{"data": [[1.70965704E12, 1.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70965704E12, 15.566666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70965704E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.70965704E12, "maxY": 15.566666666666666, "series": [{"data": [[1.70965704E12, 1.1]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing-success", "isController": false}, {"data": [[1.70965704E12, 15.566666666666666]], "isOverall": false, "label": "HTTP Request to orangeHRM for Load Testing-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70965704E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.70965704E12, "maxY": 15.566666666666666, "series": [{"data": [[1.70965704E12, 1.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70965704E12, 15.566666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70965704E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 20700000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

